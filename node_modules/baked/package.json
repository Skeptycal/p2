{
  "name": "baked",
  "description": "A singlepage static builder for prismic.io",
  "version": "0.0.8",
  "homepage": "https://prismicio.github.io/baked.js/",
  "repository": {
    "type": "git",
    "url": "git://github.com/prismicio/baked.js"
  },
  "author": {
    "name": "Étienne Vallette d'Osia",
    "email": "evo@zengularity.com",
    "url": "http://prismic.io"
  },
  "keywords": [
    "tool",
    "generator",
    "static",
    "prismic.io"
  ],
  "files": [
    "bin",
    "src",
    "gulp.js"
  ],
  "bin": {
    "baked": "./bin/baked"
  },
  "dependencies": {
    "ecstatic": "^0.5.4",
    "ejs": "^1.0.0",
    "gulp": "^3.7.0",
    "gulp-watch": "^0.6.8",
    "gulp-rimraf": "~0.1.0",
    "gulp-ignore": "~1.1.0",
    "http-server": "^0.6.1",
    "lodash": "^2.4.1",
    "moment": "^2.6.0",
    "prismic.io": "^1.0.9",
    "q": "^1.0.1",
    "winston": "^0.7.3"
  },
  "devDependencies": {
    "gulp": "^3.7.0",
    "gulp-browserify": "^0.5.0",
    "gulp-concat": "^2.2.0",
    "gulp-watch": "^0.6.8"
  },
  "engines": [
    "node >= 0.5.0"
  ],
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/prismicio/baked.js/issues"
  },
  "readme": "baked.js\n========\n\nbaked.js is a static website generator, using Node.js, which embed an updated version of the precedent JS script.\n\n## Install\n\n```sh\nnpm install -g baked\n```\n\n## Use\n\n### Simple generation\n\nRun the command:\n\n```sh\nbaked\n```\n\nIt will generate all files from `to_generate/` into `generated/`.\n\nYou can set some options using command line arguments:\n\n- `--no-async`: Generate files one by one (slower but easier to debug)\n- `--src <src_dir>`: Specify the source directory\n- `--dst <dst_dir>`: Specify the directory where generated files will be stored\n\n### Custom generation\n\nYou can specify your own gulpfile.js and use the tasks you defined.\n\nHave a look on the examples to see how you can achieve this.\n\n## Local server\n\nRun the command:\n\n```sh\ngulp serve\n```\n\nThis task:\n\n- generates the content (as “`gulp`” does)\n- starts an HTTP server which serves the generated files\n- watches modification on your sources (and the baked.js sources) and re-generate on every changes\n\nGo to [http://127.0.0.1:8282](http://127.0.0.1:8282) using your favorite browser and you will see the result.\n\n## Try on the examples\n\nSome examples of sources directory is available in the `examples/` directory.\n\n- the `blank` example presents a blank project based on baked.js\n- the `stylus` example presents a project based on baked.js and using Stylus\n  - to test it, install its dependencies (`npm install`) then run `gulp`\n- the `vanilla` example presents a project containing only sources\n  - to test it, install baked (`npm install -g baked`) then run `baked`\n\n## Template\n\nLodash's template can be used, with syntax “`[% %]`” (and “`[%= %]`”, “`[%- %]`”).\n\nHere are the variables passed to the template:\n\n- `_`: Lodash\n- `api`: The main API object\n- `bookmarks`: The bookmarks list\n- `ref`: The current ref\n- `refs`: The refs list\n- `types`: The types list\n- `tags`: The tags list\n- `master`: The master ref\n\n```html\n[% _.each(tags, function (tag) { %]\n  <span>[%= tag %]</span>\n[% }) %]\n```\n\n## Queries\n\nQueries (to prismic.io repositories) can be written directly in the template, using specify `<script>` tags (with `type=\"text/prismic-query\"`).\n\nThe documents returned by the queries are passed to the templated through the variable whose name is specified with `data-binding` attribute.\n\nPagination related parameters can be specified using `data-query-<name>` syntax.\n\n```html\n<script type=\"text/prismic-query\" data-binding=\"product\" data-query-orderings=\"[my.product.name]\">\n  [\n    [:d = any(document.type, [\"product\"])]\n    [:d = at(document.tags, [\"Featured\"])]\n  ]\n</script>\n\n<h1>[%= featuredProducts.length %] featured products:</h1>\n[% _.each(featuredProducts, function(product) { %]\n  <div>\n    <h2>[%= product.getText('product.name') %]</h2>\n    <img data-src=\"[%= product.getImageView('product.image', 'icon').url %]\">\n  </div>\n[% }) %]\n```\n\n## Links\n\nTo create links to an other generated page, use the helper `url_to`, and specify the file name (without the “.html” part).\n\n```html\n<a href=\"[%= url_to('search') %]\">[%= product.getText('product.name') %]</a>\n```\n\n## Page parameters\n\nSome pages (like articles of a blog) can have dynamically generated URL. This can be done by creating one file and specify parameter, like the ID of the article.\n\nThe problem is that these parameters are generally not known before parsing other pages linking to them. For instance the main blog page lists some articles (displaying previews) and gives links to the full article pages. That's how we know that there are articles of these specific IDs.\n\nIn baked.js, we use linking pages to infer that there are articles to be generated with these specific IDs. In short, we need to know that a page is needed in order to be able to create it!\n\nFirst, add a `<meta>` tag per parameter in the page's header.\n\n```html\n<meta name=\"prismic-routing-param\" content=\"id\">\n```\n\nThen use these parameters in your query, by using the syntax `$name` or `${name}.`\n\n```html\n<script type=\"text/prismic-query\" data-binding=\"product\">\n  [\n    [:d = any(document.id, [\"$id\"])]\n  ]\n</script>\n```\n\nTo create links to the above page, use the helper `url_to`, and specify the arguments.\n\n```html\n<a href=\"[%= url_to('product', {id: product.id}) %]\">\n    [%= product.getText('product.name') %]\n</a>\n```\n\n**Bonus**: if your only argument is “`id`”, you can give it directly, without wraping it in a “`{id: \"xxx\"}`” structure.\n\n```html\n<a href=\"[%= url_to('product', product.id) %]\">\n    [%= product.getText('product.name') %]\n</a>\n```\n\nYou can also use the helper without providing any argument.\n\n```html\n<a href=\"[%= url_to('index' %]\">index</a>\n```\n\n**Note**: remember: if nobody call a page (using the `url_to` helper) it won't be generated.\n\n### Custom URL\n\nIt is possible to customize the URL as well. To do so, just add a `<meta>` tag “`prismic-routing-pattern`” in your page's header.\n\n```html\n<meta name=\"prismic-routing-pattern\" content=\"product/$id\">\n```\n\n**Warning**: be sure to specify every routing params in the URL! If you don't, we can't guarantee that there won't be URL conflict.\n\n## Internals\n\nbaked.js is built on top of [Node.js](nodejs.org).\n\nIt uses [Q](https://github.com/kriskowal/q) and [lodash](http://lodash.com),\nlet [Gulp](gulpjs.com) and [browserify](browserify.org) handle the generation\nof the browser library and uses [EJS](https://github.com/visionmedia/ejs) for\nthe template rendering.\n\n### Dynamic browser mode\n\nThe generation can actually be performed at 2 places:\n\n- Statically by the gulp task\n  - This is the standard mode.\n  - It allows to send proper content the browsers and search engines.\n- Dynamically by the browser\n  - Every statically rendered page is able to re-generate itself, and then to emulate the navigation in the others pages (using [HTML5's History API](http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#the-history-interface)).\n  - It allows to specify specific `access_token` and `ref`, in order to render the content using a specific prismic.io's release. These can be set automatically using the [OAuth2 authentication](#auth2-authentication).\n\nThe dynamic mode needs some specific components:\n\n- The baked.js library (for instance `<script src=\"https://prismicio.github.io/baked.js/baked-0.0.8.js\"></script>`)\n- The template of every content file (stored in the `.html.tmpl` files)\n  - These files allow to render any page\n- The routing informations of every content pages (stored in `_router.json`\n  - This file allows to build a router which is used to\n    - create a link between the current page and the ones references by the `url_to` helper (reverse routing)\n    - find the template to use, its parameters and the given argument in case of non-statically-rendered page (routing)\n      - This case can happen when loading a page that is created only with a specific release.\n\n#### Specific ref to use\n\nbaked.js provides a helper to easilly switch between refs.\n\nIt listen changes made on elements containing the attribute\n“`data-prismic-action=\"update\"`” and update the ref (and re-generate)\naccordingly.\n\nHere an example of use:\n\n```ejs\n<select data-prismic-action=\"update\">\n  [% _.each(refs, function (r) { %]\n    [% if (r.ref == ref) { %]\n      <option value=\"[%= r.ref %]\" selected=\"selected\">[%= r.label %]</option>\n    [% } else { %]\n      <option value=\"[%= r.ref %]\">[%= r.label %]</option>\n    [% } %]\n  [% }) %]\n</select>\n```\n\n#### OAuth2 authentication\n\nbaked.js provides a helper to authenticate to your prismic.io application\nusing OAuth2.\n\nIt listen the “click” events on elements containing attributes\n“`data-prismic-action=\"signout\"`” or “`data-prismic-action=\"signin\"`.”\n\nIn order to work, this feature needs a meta tag “`prismic-oauth-client-id`”\nto be defined.\n\nHere an example:\n\n```ejs\n<meta name=\"prismic-oauth-client-id\" content=\"YOUR_CLIENT_ID\">\n...\n[% if (loggedIn) { %]\n  <select data-prismic-action=\"update\">\n    [% _.each(refs, function (r) { %]\n      [% if (r.ref == ref) { %]\n        <option value=\"[%= r.ref %]\" selected=\"selected\">[%= r.label %]</option>\n      [% } else { %]\n        <option value=\"[%= r.ref %]\">[%= r.label %]</option>\n      [% } %]\n    [% }) %]\n  </select>\n  <button data-prismic-action=\"signout\">Sign out</button>\n[% } else { %]\n  <button data-prismic-action=\"signin\">Sign in</button>\n[% } %]\n```\n\n### Licence\n\nThis software is licensed under the Apache 2 license, quoted below.\n\nCopyright 2013 Zengularity (http://www.zengularity.com).\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this project except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
  "readmeFilename": "README.md",
  "_id": "baked@0.0.8",
  "_from": "baked@^0.0.8"
}
